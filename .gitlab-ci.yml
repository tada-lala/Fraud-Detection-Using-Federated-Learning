stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  IMAGE_NAME: ${IMAGE_NAME:-fraud-detection-app}

# Build image and push to DockerHub
build:
  stage: build
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "Logging into DockerHub..."
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker tag $DOCKERHUB_USERNAME/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
    - docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
  only:
    - main

# Deploy by SSH-ing into GCP VM and running container
deploy:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add --no-cache openssh-client bash
  script:
    # prepare SSH key
    - mkdir -p ~/.ssh
    - printf "%s\n" "$GCP_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$GCP_HOST" >> ~/.ssh/known_hosts

    # create a small deploy script (variables expanded by runner)
    - cat > deploy.sh <<DEPLOY
#!/bin/bash
set -e
# login to DockerHub
echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
# pull latest image
docker pull $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
# stop / remove old container (ignore errors)
docker stop fraud-app || true
docker rm fraud-app || true
# run container (host port default 80 -> container 8000)
docker run -d --name fraud-app -p ${HOST_PORT:-80}:8000 --restart unless-stopped $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
DEPLOY

    - chmod +x deploy.sh
    - scp -o StrictHostKeyChecking=no deploy.sh $GCP_SSH_USER@$GCP_HOST:/tmp/deploy.sh
    - ssh -o StrictHostKeyChecking=no $GCP_SSH_USER@$GCP_HOST 'bash /tmp/deploy.sh'
  only:
    - main
